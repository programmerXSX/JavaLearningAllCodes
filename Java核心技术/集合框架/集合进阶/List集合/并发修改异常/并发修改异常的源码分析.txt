public interface List<E>{
     Iterator<E> iterator();
      boolean add(E e);
}
public class ArrayList<E> extends AbstractList<E> implements List<E>{
/*
modCount:实际修改集合的次数
expectedModCount:预期修改集合的次数
*/
     public boolean add(E e) {
        modCount++;//调用add方法后，modCount会+1
        add(e, elementData, size);
        return true;
    }
    public Iterator<E> iterator() {
            return new Itr();
        }
    private class Itr implements Iterator<E> {
         int expectedModCount = modCount;

        public E next() {
            checkForComodification();
            int i = cursor;
            if (i >= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
            //调用add之后，modCount+1与exceptedModCount不一样，报错
                throw new ConcurrentModificationException();
       }
   }
}